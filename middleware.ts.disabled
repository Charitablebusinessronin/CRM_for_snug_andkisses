import { type NextRequest, NextResponse } from "next/server"
import { logAuditEvent } from "@/lib/hipaa-audit-edge"
import { authMiddleware } from "@/lib/auth-middleware"

export async function middleware(request: NextRequest) {
  const apiPath = request.nextUrl.pathname

  // Skip auth middleware for health checks to prevent Edge Runtime issues
  let response = NextResponse.next()
  
  // Authentication middleware (app-level logic) - temporarily disabled for Edge Runtime compatibility
  if (!apiPath.includes("/api/health")) {
    try {
      const authResponse = await authMiddleware(request)
      if (authResponse && authResponse.status !== 200) {
        return authResponse
      }
      response = authResponse || NextResponse.next()
    } catch (error) {
      // Skip auth on Edge Runtime issues but log error
      console.error("Auth middleware error (Edge Runtime):", error)
    }
  }

  // Note: Rate limiting, DDoS protection, IP filtering handled by Catalyst Gateway

  // Strict CORS Configuration for HIPAA compliance
  const allowedOrigins = [
    process.env.NODE_ENV === 'development' ? "http://localhost:8000" : null,
    process.env.NODE_ENV === 'development' ? "http://localhost:8001" : null,
    "https://snugsandkisses.com",
    "https://app.snugsandkisses.com",
    process.env.NEXT_PUBLIC_WEBSITE_URL,
    process.env.NEXT_PUBLIC_APP_URL,
  ].filter(Boolean) as string[]

  const origin = request.headers.get("origin")

  // Only allow CORS for specific API endpoints, deny for sensitive routes
  if (origin && allowedOrigins.includes(origin) && !apiPath.includes("/admin/") && !apiPath.includes("/private/")) {
    response.headers.set("Access-Control-Allow-Origin", origin)
    response.headers.set("Access-Control-Allow-Credentials", "true")
    response.headers.set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
    response.headers.set(
      "Access-Control-Allow-Headers",
      "Content-Type, Authorization, X-Requested-With, Accept, Origin, X-CSRF-Token",
    )
    response.headers.set("Access-Control-Max-Age", "86400") // 24 hours
  }

  // Handle preflight requests
  if (request.method === "OPTIONS") {
    return new Response(null, { status: 200, headers: response.headers })
  }

  // HIPAA Audit Logging for API access (exclude health checks to reduce noise)
  const isHealthCheck = apiPath === "/api/health" || apiPath === "/api/health/"
  if (apiPath.startsWith("/api/") && !isHealthCheck) {
    try {
      await logAuditEvent({
        action: "API_ACCESS",
        resource: apiPath,
        method: request.method,
        ip_address: request.headers.get("x-forwarded-for") || "unknown",
        user_agent: request.headers.get("user-agent") || "unknown",
        timestamp: new Date().toISOString(),
        origin: origin || "unknown",
        request_id: crypto.randomUUID(),
      })
    } catch (error) {
      console.error("Audit logging failed:", error)
    }
  }

  // Enhanced Security Headers for HIPAA Compliance
  response.headers.set("X-Content-Type-Options", "nosniff")
  response.headers.set("X-Frame-Options", "DENY")
  response.headers.set("X-XSS-Protection", "1; mode=block")
  response.headers.set("Referrer-Policy", "strict-origin-when-cross-origin")
  response.headers.set("Permissions-Policy", "camera=(), microphone=(), geolocation=(), payment=()")
  
  // Stricter CSP for healthcare compliance (removed unsafe-eval/unsafe-inline)
  const isDevelopment = process.env.NODE_ENV === 'development'
  const csp = isDevelopment 
    ? "default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss:;"
    : "default-src 'self'; script-src 'self'; style-src 'self' 'sha256-*'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https:; form-action 'self'; base-uri 'self'; object-src 'none';"
  
  response.headers.set("Content-Security-Policy", csp)
  
  // HSTS for production
  if (!isDevelopment) {
    response.headers.set("Strict-Transport-Security", "max-age=31536000; includeSubDomains; preload")
  }

  return response
}

export const config = {
  // Temporarily disable middleware to fix Edge Runtime jsonwebtoken issues
  matcher: [],
}
