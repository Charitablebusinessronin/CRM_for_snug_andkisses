/**
 * PHASE 3: AUTOMATED EMAIL SEQUENCES
 * Priya Sharma - Zoho Stack Specialist
 * Advanced email automation for Kim's client workflow
 */

const catalyst = require('zcatalyst-sdk-node');

class EmailSequenceManager {
    constructor() {
        this.app = catalyst.initialize();
        this.mail = this.app.sendmail();
        this.crm = this.app.crm();
        this.functions = this.app.functions();
        this.datastore = this.app.datastore();
    }

    /**
     * Initialize Email Sequence Templates
     */
    async initializeEmailTemplates() {
        const templates = {
            // Pre-Interview Sequence
            interview_prep_reminder: {
                subject: "Your doula interview is tomorrow! üåü Prep guide inside",
                template: this.getInterviewPrepTemplate()
            },
            
            // Post-Interview Follow-up
            post_interview_followup: {
                subject: "How did your doula interview go? Next steps ü§±",
                template: this.getPostInterviewTemplate()
            },
            
            // Doula Profile Delivery (Phase 4 trigger)
            doula_profiles_delivery: {
                subject: "Meet your matched doulas! üë• Profiles inside",
                template: this.getDoulaProfilesTemplate()
            },
            
            // Interview Coordination
            interview_coordination: {
                subject: "Schedule your doula meetings üìÖ",
                template: this.getInterviewCoordinationTemplate()
            },
            
            // Selection Process
            selection_reminder: {
                subject: "Ready to choose your doula? üíù",
                template: this.getSelectionReminderTemplate()
            }
        };

        // Store templates in Catalyst DataStore
        const table = this.datastore.table('email_templates');
        
        for (const [templateId, templateData] of Object.entries(templates)) {
            try {
                const record = {
                    template_id: templateId,
                    subject: templateData.subject,
                    html_content: templateData.template,
                    created_date: new Date().toISOString(),
                    is_active: true
                };
                
                await table.insertRow(record);
                console.log(`‚úÖ Template stored: ${templateId}`);
            } catch (error) {
                console.log(`üìù Template exists: ${templateId}`);
            }
        }
        
        return templates;
    }

    /**
     * Schedule Email Sequence for Client - HIPAA COMPLIANT
     */
    async scheduleEmailSequence(crmRecordId, clientData, sequenceType = 'interview_flow') {
        const PHIEncryption = require('../CRM_for_snug_andkisses/lib/phi-encryption');
        const HIPAAPHIAudit = require('../CRM_for_snug_andkisses/lib/hipaa-phi-audit');
        
        // Verify PHI consent before processing
        if (!PHIEncryption.verifyPHIConsent(clientData, 'email_communication')) {
            throw new Error('PHI consent not verified for email communications');
        }
        
        const sequences = {
            interview_flow: [
                { template: 'interview_prep_reminder', delay_hours: 24 },
                { template: 'post_interview_followup', delay_hours: 168 }, // 1 week
                { template: 'doula_profiles_delivery', delay_hours: 192 }, // 8 days
                { template: 'interview_coordination', delay_hours: 240 }, // 10 days
                { template: 'selection_reminder', delay_hours: 336 } // 14 days
            ]
        };

        const sequence = sequences[sequenceType];
        const scheduledEmails = [];

        // Sanitize client data - remove PHI before storage
        const sanitizedClientData = PHIEncryption.sanitizeForEmail(clientData);
        
        // Encrypt any remaining sensitive data
        const encryptedClientData = await PHIEncryption.encryptPHI({
            due_date: clientData.due_date,
            birth_preferences: clientData.birth_preferences,
            insurance_provider: clientData.insurance_provider
        });

        for (const emailConfig of sequence) {
            const scheduleTime = new Date();
            scheduleTime.setHours(scheduleTime.getHours() + emailConfig.delay_hours);

            const scheduledEmail = {
                crm_record_id: crmRecordId,
                client_email: clientData.email,
                client_name: clientData.first_name,
                template_id: emailConfig.template,
                scheduled_time: scheduleTime.toISOString(),
                status: 'scheduled',
                client_data: JSON.stringify(sanitizedClientData), // No PHI stored
                encrypted_phi: JSON.stringify(encryptedClientData) // Encrypted PHI separate
            };

            try {
                const table = this.datastore.table('scheduled_emails');
                const result = await table.insertRow(scheduledEmail);
                scheduledEmails.push(result);
                console.log(`üìÖ Email scheduled: ${emailConfig.template} for ${scheduleTime}`);
            } catch (error) {
                console.error(`‚ùå Failed to schedule: ${emailConfig.template}`, error);
            }
        }

        return scheduledEmails;
    }

    /**
     * Process Scheduled Emails (Called by Cron)
     */
    async processScheduledEmails() {
        const table = this.datastore.table('scheduled_emails');
        const currentTime = new Date().toISOString();
        
        // Query for emails due to be sent
        const dueEmails = await table.getAllRows({
            filter: {
                status: 'scheduled',
                scheduled_time: { $lte: currentTime }
            }
        });

        console.log(`üì¨ Processing ${dueEmails.length} due emails`);

        for (const emailRecord of dueEmails) {
            try {
                await this.sendScheduledEmail(emailRecord);
                
                // Update status to sent
                await table.updateRow({
                    ROWID: emailRecord.ROWID,
                    status: 'sent',
                    sent_time: new Date().toISOString()
                });
                
                console.log(`‚úÖ Email sent: ${emailRecord.template_id} to ${emailRecord.client_email}`);
            } catch (error) {
                console.error(`‚ùå Failed to send email:`, error);
                
                // Update status to failed
                await table.updateRow({
                    ROWID: emailRecord.ROWID,
                    status: 'failed',
                    error_message: error.message
                });
            }
        }
    }

    /**
     * Send Individual Scheduled Email - HIPAA COMPLIANT
     */
    async sendScheduledEmail(emailRecord) {
        const PHIEncryption = require('../CRM_for_snug_andkisses/lib/phi-encryption');
        const HIPAAPHIAudit = require('../CRM_for_snug_andkisses/lib/hipaa-phi-audit');
        
        const templatesTable = this.datastore.table('email_templates');
        const template = await templatesTable.getRow(emailRecord.template_id);
        const sanitizedClientData = JSON.parse(emailRecord.client_data);
        
        // Decrypt PHI only if needed and log access
        let phiData = {};
        if (emailRecord.encrypted_phi && this.templateRequiresPHI(template.template_id)) {
            const encryptedPHI = JSON.parse(emailRecord.encrypted_phi);
            phiData = await PHIEncryption.decryptPHI(encryptedPHI);
            
            // Log PHI access for audit
            await HIPAAPHIAudit.logPHIAccess({
                action: 'EMAIL_TEMPLATE_ACCESS',
                phi_type: encryptedPHI.phi_fields,
                user_id: 'system_email_processor',
                purpose: 'email_personalization',
                client_id: emailRecord.crm_record_id,
                ip_address: 'internal_system',
                user_agent: 'email_processor',
                timestamp: new Date().toISOString(),
                origin: 'zoho_catalyst',
                request_id: `email_${emailRecord.ROWID}`,
                consent_verified: true,
                data_encrypted: true,
                result: 'success'
            });
        }

        // Personalize email content with masked PHI only
        let htmlContent = template.html_content
            .replace(/{{client_name}}/g, sanitizedClientData.first_name)
            .replace(/{{due_date}}/g, phiData.due_date ? PHIEncryption.maskPHI(phiData.due_date, 'date') : 'your upcoming delivery')
            .replace(/{{interview_date}}/g, sanitizedClientData.interview_date || 'your scheduled interview');

        const emailConfig = {
            to: [{ 
                email: emailRecord.client_email, 
                name: clientData.first_name 
            }],
            from: { 
                email: "hello@snugandkisses.com", 
                name: "Snug & Kisses Care Team" 
            },
            subject: template.subject.replace(/{{client_name}}/g, clientData.first_name),
            html_body: htmlContent
        };

        const response = await this.mail.sendMail(emailConfig);
        
        // Update CRM with email activity
        await this.logEmailActivity(emailRecord.crm_record_id, emailRecord.template_id);
        
        return response;
    }
    
    /**
     * Check if email template requires PHI data
     */
    templateRequiresPHI(templateId) {
        // Only specific templates need PHI access
        const phiRequiredTemplates = [
            'interview_prep_reminder', // May need due date context
            'selection_reminder' // May need birth preferences context
        ];
        return phiRequiredTemplates.includes(templateId);
    }

    /**
     * Log Email Activity in CRM
     */
    async logEmailActivity(crmRecordId, templateId) {
        try {
            const activityData = {
                module: "Activities",
                data: {
                    "Subject": `Automated Email: ${templateId}`,
                    "Activity_Type": "Email",
                    "Status": "Completed",
                    "What_Id": crmRecordId,
                    "Activity_DateTime": new Date().toISOString(),
                    "Description": `Phase 3: Automated email sequence - ${templateId}`
                }
            };
            
            await this.crm.insertRecords(activityData);
        } catch (error) {
            console.error("‚ùå Failed to log email activity:", error);
        }
    }

    /**
     * Email Template: Interview Prep Reminder
     */
    getInterviewPrepTemplate() {
        return `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <header style="background: #f8f4f1; padding: 20px; text-align: center;">
                <h1 style="color: #8b4513; margin: 0;">Snug & Kisses</h1>
                <p style="color: #666; margin: 5px 0;">Your doula interview is tomorrow!</p>
            </header>
            
            <main style="padding: 30px 20px;">
                <h2 style="color: #8b4513;">Hi {{client_name}}! üëã</h2>
                
                <p>Just a friendly reminder that your doula interview is scheduled for tomorrow! We're so excited to help you find your perfect birth support partner.</p>
                
                <div style="background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h3 style="margin-top: 0; color: #2d5016;">üìã Quick Prep Checklist</h3>
                    <ul style="margin: 10px 0; padding-left: 20px;">
                        <li>Your expected due date: {{due_date}}</li>
                        <li>Birth preferences and any special needs</li>
                        <li>Insurance information (if applicable)</li>
                        <li>Questions about postpartum care services</li>
                        <li>Preferred communication style with your doula</li>
                    </ul>
                </div>
                
                <div style="background: #fff3e0; padding: 15px; border-radius: 8px; margin: 20px 0;">
                    <h4 style="margin-top: 0; color: #e65100;">üí° What We'll Cover:</h4>
                    <p style="margin: 0;">We'll discuss your birth vision, review our qualified doula profiles, and create a personalized matching plan for your journey.</p>
                </div>
                
                <p>Need to reschedule? Just reply to this email or call us at <strong>(555) 123-4567</strong></p>
                
                <p style="margin-top: 30px;">Looking forward to connecting with you tomorrow!<br>
                <strong>The Snug & Kisses Team</strong> üíù</p>
            </main>
        </div>`;
    }

    /**
     * Email Template: Post Interview Follow-up
     */
    getPostInterviewTemplate() {
        return `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <header style="background: #f0f8ff; padding: 20px; text-align: center;">
                <h1 style="color: #2c5aa0; margin: 0;">How did your interview go?</h1>
                <p style="color: #666; margin: 5px 0;">Snug & Kisses Care Team</p>
            </header>
            
            <main style="padding: 30px 20px;">
                <h2 style="color: #2c5aa0;">Hi {{client_name}}! üåü</h2>
                
                <p>We hope your doula interview went wonderfully! Our team is now working on your personalized doula matches based on everything we discussed.</p>
                
                <div style="background: #f0f8ff; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #2c5aa0;">
                    <h3 style="margin-top: 0; color: #2c5aa0;">üì¨ What's Coming Next:</h3>
                    <ul style="line-height: 1.8;">
                        <li><strong>Within 2-3 days:</strong> Your personalized doula profiles</li>
                        <li><strong>This week:</strong> Schedule meet-and-greets with your top matches</li>
                        <li><strong>Following week:</strong> Make your final doula selection</li>
                    </ul>
                </div>
                
                <div style="background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 20px 0;">
                    <p style="margin: 0;"><strong>üí≠ Have questions or concerns?</strong> Don't hesitate to reach out! We're here to support you every step of the way.</p>
                </div>
                
                <p>Thank you for trusting us with your birth journey. We're honored to be part of this special time! ü§±</p>
                
                <p style="margin-top: 30px;">With love and support,<br>
                <strong>The Snug & Kisses Team</strong></p>
            </main>
        </div>`;
    }

    /**
     * Additional templates for Phases 4-6
     */
    getDoulaProfilesTemplate() {
        return `<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #8b4513;">Meet Your Matched Doulas! üë•</h2>
            <p>Hi {{client_name}}, based on our interview, here are your personalized doula matches...</p>
        </div>`;
    }

    getInterviewCoordinationTemplate() {
        return `<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #2c5aa0;">Schedule Your Doula Meetings üìÖ</h2>
            <p>Hi {{client_name}}, it's time to meet your potential doulas in person...</p>
        </div>`;
    }

    getSelectionReminderTemplate() {
        return `<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #8b4513;">Ready to Choose Your Doula? üíù</h2>
            <p>Hi {{client_name}}, you've met some amazing doulas! Let's finalize your selection...</p>
        </div>`;
    }
}

module.exports = EmailSequenceManager;

// Catalyst Function Handlers
const emailManager = new EmailSequenceManager();

exports.handler = async (event, context) => {
    try {
        const { action, data } = JSON.parse(event.body || '{}');
        
        switch (action) {
            case 'initialize_templates':
                return await emailManager.initializeEmailTemplates();
                
            case 'schedule_sequence':
                return await emailManager.scheduleEmailSequence(
                    data.crm_record_id, 
                    data.client_data, 
                    data.sequence_type
                );
                
            case 'process_scheduled':
                return await emailManager.processScheduledEmails();
                
            case 'send_immediate':
                return await emailManager.sendScheduledEmail(data);
                
            default:
                return { 
                    statusCode: 400, 
                    body: JSON.stringify({ error: 'Invalid action' }) 
                };
        }
    } catch (error) {
        console.error("‚ùå Email Sequence Error:", error);
        return { 
            statusCode: 500, 
            body: JSON.stringify({ error: error.message }) 
        };
    }
};

// Cron Handler for scheduled emails
exports.cronHandler = async (cronEvent, context) => {
    console.log("‚è∞ Email Sequence Cron Triggered");
    return await emailManager.processScheduledEmails();
};