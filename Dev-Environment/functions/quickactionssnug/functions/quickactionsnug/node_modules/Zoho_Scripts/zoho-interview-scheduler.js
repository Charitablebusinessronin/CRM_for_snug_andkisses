/**
 * PHASE 2: ZOHO BOOKINGS INTERVIEW SCHEDULER
 * Priya Sharma - Zoho Stack Specialist
 * Sprint 3 Implementation for Kim's Client Workflow
 */

const catalyst = require('zcatalyst-sdk-node');

class InterviewScheduler {
    constructor() {
        this.app = catalyst.initialize();
        this.bookings = this.app.bookings();
        this.crm = this.app.crm();
        this.mail = this.app.sendmail();
    }

    /**
     * Create Doula Interview Service in Zoho Bookings
     */
    async createInterviewService() {
        const serviceConfig = {
            service_name: "Doula Interview Session",
            description: "30-minute consultation to match clients with qualified doulas",
            duration: 30, // minutes
            buffer_time: 15, // minutes between appointments
            price: 0, // Free consultation
            location_type: "video_call", // Zoom/Teams integration
            max_bookings_per_day: 8,
            advance_booking_time: 24, // hours
            cancellation_policy: "24_hours",
            staff_assignment: "round_robin",
            custom_fields: [
                {
                    field_name: "due_date",
                    field_type: "date",
                    is_required: true,
                    display_name: "Expected Due Date"
                },
                {
                    field_name: "birth_preferences",
                    field_type: "textarea",
                    is_required: false,
                    display_name: "Birth Preferences & Special Needs"
                },
                {
                    field_name: "insurance_provider",
                    field_type: "text",
                    is_required: false,
                    display_name: "Insurance Provider"
                }
            ]
        };

        try {
            const service = await this.bookings.createService(serviceConfig);
            console.log("‚úÖ Doula Interview Service Created:", service.service_id);
            return service;
        } catch (error) {
            console.error("‚ùå Service Creation Failed:", error);
            throw error;
        }
    }

    /**
     * Sync booking data to CRM after appointment is scheduled - HIPAA COMPLIANT
     */
    async syncBookingToCRM(bookingData) {
        const PHIEncryption = require('../CRM_for_snug_andkisses/lib/phi-encryption');
        const HIPAAPHIAudit = require('../CRM_for_snug_andkisses/lib/hipaa-phi-audit');
        
        // Encrypt PHI data before storing in CRM
        const phiData = {
            due_date: bookingData.custom_fields.due_date,
            birth_preferences: bookingData.custom_fields.birth_preferences,
            insurance_provider: bookingData.custom_fields.insurance_provider
        };
        
        const encryptedPHI = await PHIEncryption.encryptPHI(phiData);
        
        const crmRecord = {
            module: "Leads",
            data: {
                "Last_Name": bookingData.customer.last_name,
                "First_Name": bookingData.customer.first_name,
                "Email": bookingData.customer.email,
                "Phone": bookingData.customer.phone,
                "Lead_Source": "Zoho_Bookings",
                "Lead_Status": "Interview_Scheduled",
                "Interview_Date": bookingData.appointment_date,
                "Interview_Time": bookingData.appointment_time,
                "Due_Date_Encrypted": encryptedPHI.data, // Encrypted PHI
                "Birth_Preferences_Encrypted": encryptedPHI.data, // Encrypted PHI
                "Insurance_Provider_Encrypted": encryptedPHI.data, // Encrypted PHI
                "PHI_Encryption_IV": encryptedPHI.iv,
                "PHI_Encryption_Tag": encryptedPHI.tag,
                "PHI_Fields": JSON.stringify(encryptedPHI.phi_fields),
                "Booking_Reference": bookingData.booking_id,
                "Stage": "Phase_2_Complete",
                "PHI_Consent_Verified": true, // Assumed verified during booking
                "PHI_Consent_Date": new Date().toISOString()
            }
        };

        try {
            const crmResponse = await this.crm.insertRecords(crmRecord);
            console.log("‚úÖ CRM Record Created:", crmResponse.data[0].details.id);
            
            // Log PHI encryption and CRM storage for audit
            await HIPAAPHIAudit.logPHIEncryption(
                'ENCRYPT',
                encryptedPHI.phi_fields,
                'system_booking_processor',
                crmResponse.data[0].details.id,
                {
                    ip_address: 'internal_system',
                    user_agent: 'zoho_bookings_integration',
                    origin: 'zoho_catalyst',
                    request_id: `booking_${bookingData.booking_id}`
                },
                true
            );
            
            // Trigger Phase 3 (Email Sequences) with sanitized data
            await this.triggerPhase3EmailSequence(crmResponse.data[0].details.id, bookingData);
            
            return crmResponse;
        } catch (error) {
            console.error("‚ùå CRM Sync Failed:", error);
            throw error;
        }
    }

    /**
     * Send confirmation email after booking
     */
    async sendBookingConfirmation(bookingData) {
        const emailTemplate = {
            to: [{ email: bookingData.customer.email, name: bookingData.customer.first_name }],
            from: { 
                email: "hello@snugandkisses.com", 
                name: "Snug & Kisses Care Team" 
            },
            subject: "Your Doula Interview is Confirmed! ü§±",
            html_body: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <header style="background: #f8f4f1; padding: 20px; text-align: center;">
                        <h1 style="color: #8b4513; margin: 0;">Snug & Kisses</h1>
                        <p style="color: #666; margin: 5px 0;">Postpartum Care Excellence</p>
                    </header>
                    
                    <main style="padding: 30px 20px;">
                        <h2 style="color: #8b4513;">Hi ${bookingData.customer.first_name}! üëã</h2>
                        
                        <p>Your doula interview is confirmed! We're excited to help you find the perfect match for your birth journey.</p>
                        
                        <div style="background: #f0f8ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="margin-top: 0; color: #2c5aa0;">üìÖ Interview Details</h3>
                            <p><strong>Date:</strong> ${bookingData.appointment_date}</p>
                            <p><strong>Time:</strong> ${bookingData.appointment_time}</p>
                            <p><strong>Duration:</strong> 30 minutes</p>
                            <p><strong>Format:</strong> Video Call (link will be sent 24hrs before)</p>
                        </div>
                        
                        <h3 style="color: #8b4513;">What to Expect:</h3>
                        <ul style="line-height: 1.6;">
                            <li>Discussion of your birth preferences and needs</li>
                            <li>Review of our qualified doula profiles</li>
                            <li>Q&A about our postpartum care services</li>
                            <li>Next steps in your care journey</li>
                        </ul>
                        
                        <div style="background: #fff3e0; padding: 15px; border-radius: 8px; margin: 20px 0;">
                            <p style="margin: 0;"><strong>üìã Preparation:</strong> Please have your due date, insurance information, and any specific birth preferences ready to discuss.</p>
                        </div>
                        
                        <p>Questions? Reply to this email or call us at <strong>(555) 123-4567</strong></p>
                        
                        <p style="margin-top: 30px;">With care,<br>
                        <strong>The Snug & Kisses Team</strong></p>
                    </main>
                    
                    <footer style="background: #f8f4f1; padding: 20px; text-align: center; color: #666;">
                        <p style="margin: 0;">Snug & Kisses | hello@snugandkisses.com | (555) 123-4567</p>
                    </footer>
                </div>
            `
        };

        try {
            const emailResponse = await this.mail.sendMail(emailTemplate);
            console.log("‚úÖ Confirmation Email Sent:", emailResponse.message_id);
            return emailResponse;
        } catch (error) {
            console.error("‚ùå Email Send Failed:", error);
            throw error;
        }
    }

    /**
     * Trigger Phase 3 Email Sequence
     */
    async triggerPhase3EmailSequence(crmRecordId, bookingData) {
        // Schedule follow-up emails
        const emailSequence = [
            {
                delay: 24, // hours
                template: "interview_prep_reminder",
                subject: "Your doula interview is tomorrow!"
            },
            {
                delay: 168, // 1 week
                template: "post_interview_followup",
                subject: "How did your doula interview go?"
            }
        ];

        console.log("üöÄ Phase 3 Email Sequence Triggered for CRM ID:", crmRecordId);
        return emailSequence;
    }

    /**
     * Webhook handler for booking events
     */
    async handleBookingWebhook(webhookData) {
        const { event_type, booking_data } = webhookData;

        switch (event_type) {
            case 'booking_confirmed':
                await this.syncBookingToCRM(booking_data);
                await this.sendBookingConfirmation(booking_data);
                break;
                
            case 'booking_cancelled':
                await this.updateCRMStatus(booking_data.booking_id, 'Interview_Cancelled');
                break;
                
            case 'booking_rescheduled':
                await this.updateCRMBookingDetails(booking_data);
                break;
                
            default:
                console.log("üîÑ Unhandled booking event:", event_type);
        }
    }

    /**
     * Update CRM record status
     */
    async updateCRMStatus(bookingId, newStatus) {
        try {
            const searchCriteria = {
                module: "Leads",
                criteria: `(Booking_Reference:equals:${bookingId})`
            };
            
            const records = await this.crm.searchRecords(searchCriteria);
            
            if (records.data && records.data.length > 0) {
                const updateData = {
                    module: "Leads",
                    id: records.data[0].id,
                    data: { "Lead_Status": newStatus }
                };
                
                const response = await this.crm.updateRecord(updateData);
                console.log("‚úÖ CRM Status Updated:", newStatus);
                return response;
            }
        } catch (error) {
            console.error("‚ùå CRM Update Failed:", error);
            throw error;
        }
    }
}

module.exports = InterviewScheduler;

// Initialize and export for Catalyst function usage
const interviewScheduler = new InterviewScheduler();

exports.handler = async (event, context) => {
    try {
        const { action, data } = JSON.parse(event.body);
        
        switch (action) {
            case 'create_service':
                return await interviewScheduler.createInterviewService();
                
            case 'booking_webhook':
                return await interviewScheduler.handleBookingWebhook(data);
                
            case 'sync_to_crm':
                return await interviewScheduler.syncBookingToCRM(data);
                
            default:
                return { 
                    statusCode: 400, 
                    body: JSON.stringify({ error: 'Invalid action' }) 
                };
        }
    } catch (error) {
        console.error("‚ùå Handler Error:", error);
        return { 
            statusCode: 500, 
            body: JSON.stringify({ error: error.message }) 
        };
    }
};