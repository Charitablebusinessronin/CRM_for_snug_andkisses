# ============================================================================
# SNUG & KISSES HEALTHCARE CRM - PRODUCTION DOCKER COMPOSE
# Full-Stack TypeScript CRM with HIPAA Compliance & Enhanced Security
# ============================================================================

services:
  # ============================================================================
  # BACKEND SERVICE - Enhanced TypeScript API with Zoho Integration
  # ============================================================================
  backend:
    build:
      context: ./sabir-crm-typescript
      dockerfile: Dockerfile
    container_name: sabir-crm-backend
    restart: unless-stopped
    ports:
      - "4728:4728"
    
    # Environment configuration with HIPAA compliance
    environment:
      NODE_ENV: production
      PORT: 4728
      HIPAA_AUDIT_LOGGING: "true"
      
      # Core Zoho Configuration
      ZOHO_CLIENT_ID: ${ZOHO_CLIENT_ID}
      ZOHO_CLIENT_SECRET: ${ZOHO_CLIENT_SECRET}
      ZOHO_REFRESH_TOKEN: ${ZOHO_REFRESH_TOKEN}
      ZOHO_ENVIRONMENT: ${ZOHO_ENVIRONMENT:-production}
      
      # Zoho CRM Configuration (use main credentials)
      ZOHO_CRM_CLIENT_ID: ${ZOHO_CLIENT_ID}
      ZOHO_CRM_CLIENT_SECRET: ${ZOHO_CLIENT_SECRET}
      ZOHO_CRM_REFRESH_TOKEN: ${ZOHO_REFRESH_TOKEN}
      
      # Additional Zoho Services (optional - default to empty if not set)
      ZOHO_BOOKS_CLIENT_ID: ${ZOHO_BOOKS_CLIENT_ID:-}
      ZOHO_BOOKS_CLIENT_SECRET: ${ZOHO_BOOKS_CLIENT_SECRET:-}
      ZOHO_BOOKS_REFRESH_TOKEN: ${ZOHO_BOOKS_REFRESH_TOKEN:-}
      ZOHO_BOOKS_ORG_ID: ${ZOHO_BOOKS_ORG_ID:-}
      
      ZOHO_ANALYTICS_CLIENT_ID: ${ZOHO_ANALYTICS_CLIENT_ID:-}
      ZOHO_ANALYTICS_CLIENT_SECRET: ${ZOHO_ANALYTICS_CLIENT_SECRET:-}
      ZOHO_ANALYTICS_REFRESH_TOKEN: ${ZOHO_ANALYTICS_REFRESH_TOKEN:-}
      
      ZOHO_CAMPAIGNS_CLIENT_ID: ${ZOHO_CAMPAIGNS_CLIENT_ID:-}
      ZOHO_CAMPAIGNS_CLIENT_SECRET: ${ZOHO_CAMPAIGNS_CLIENT_SECRET:-}
      ZOHO_CAMPAIGNS_REFRESH_TOKEN: ${ZOHO_CAMPAIGNS_REFRESH_TOKEN:-}
      
      ZOHO_DESK_CLIENT_ID: ${ZOHO_DESK_CLIENT_ID:-}
      ZOHO_DESK_CLIENT_SECRET: ${ZOHO_DESK_CLIENT_SECRET:-}
      ZOHO_DESK_REFRESH_TOKEN: ${ZOHO_DESK_REFRESH_TOKEN:-}
      
      # API URLs
      ZOHO_CRM_API_URL: ${ZOHO_CRM_API_URL}
      ZOHO_BOOKS_API_URL: ${ZOHO_BOOKS_API_URL}
      ZOHO_CAMPAIGNS_API_URL: ${ZOHO_CAMPAIGNS_API_URL}
      ZOHO_ANALYTICS_API_URL: ${ZOHO_ANALYTICS_API_URL}
      
      # Network configuration
      FRONTEND_URL: http://frontend:5369
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      
      # Catalyst configuration
      CATALYST_PROJECT_ID: ${CATALYST_PROJECT_ID}
      CATALYST_ENVIRONMENT: ${CATALYST_ENVIRONMENT}
      CATALYST_FROM_EMAIL: ${CATALYST_FROM_EMAIL}
      
      # Email configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
    
    # HIPAA-compliant volume mounts for audit logging
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_temp:/app/temp
    
    # Enhanced health check with curl support
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4728/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security enhancements
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"  # Non-root user matching Dockerfile
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Enhanced logging for HIPAA compliance
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=backend,hipaa-compliant=true"
    
    networks:
      - crm-network

  # ============================================================================
  # FRONTEND SERVICE - Enhanced Next.js Application
  # ============================================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        # Pass environment variables needed for build
        NEXT_PUBLIC_API_URL: http://localhost:4728/api
        NEXT_PUBLIC_CATALYST_CRM_URL: ${NEXTAUTH_URL}
        NEXTAUTH_URL: ${NEXTAUTH_URL}
    container_name: sabir-crm-frontend
    restart: unless-stopped
    ports:
      - "5369:5369"  # Updated to match local development port
    
    environment:
      NODE_ENV: production
      
      # API endpoints for container communication
      NEXT_PUBLIC_API_URL: http://localhost:4728/api
      BACKEND_API_URL: http://backend:4728/api
      
      # NextAuth configuration
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-secret-key-here}
      
      # Build-time variables
      NEXT_PUBLIC_CATALYST_CRM_URL: ${NEXTAUTH_URL}
      
      # JWT Configuration for Edge Runtime
      JWT_SECRET_KEY_BASE64: ${JWT_SECRET_KEY_BASE64:-}
      JWT_PUBLIC_KEY_BASE64: ${JWT_PUBLIC_KEY_BASE64:-}
      JWT_REFRESH_SECRET_BASE64: ${JWT_REFRESH_SECRET_BASE64:-}
    
    # Enhanced health check
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5369/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Ensure backend is healthy before starting frontend
    depends_on:
      backend:
        condition: service_healthy
    
    # Security enhancements
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=frontend"
    
    networks:
      - crm-network

# ============================================================================
# NETWORK CONFIGURATION - Isolated container networking
# ============================================================================
networks:
  crm-network:
    driver: bridge
    name: sabir-crm-network

# ============================================================================
# PERSISTENT VOLUMES - HIPAA-compliant data storage
# ============================================================================
volumes:
  backend_logs:
    driver: local
    name: sabir-crm-logs
  
  backend_uploads:
    driver: local
    name: sabir-crm-uploads
  
  backend_temp:
    driver: local
    name: sabir-crm-temp